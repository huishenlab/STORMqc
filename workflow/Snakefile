import pandas as pd
import os
import re

from snakemake.utils import min_version

def set_directory(which):
    if config['output_dirs'][which] == '':
        return os.getcwd()
    
    return config['output_dirs'][which]

def set_output_directory():
    if config['output_direction'] == '':
        return os.getcwd()
    else:
        return config['output_directory']

# Set minimum Snakemake version
min_version('7.0')

# Setup configuration for pipeline
configfile:
    'config/config.yaml'

# Set fixed values for pipeline based on configuration
SAMPLES = pd.read_csv(config['samplesheet'], sep='\t', dtype=str).set_index(['sample'], drop=False)
LOG = set_directory('log')
ANALYSIS = set_directory('analysis')
BENCHMARK = set_directory('benchmark')

rule all:
    input:
        # Rename FASTQs and run FASTqc
        expand(
            f'{ANALYSIS}/fastqc/{{samples.sample}}_R{{read}}_fastqc.{{ext}}',
            ext = ['html', 'zip'],
            read = [1, 2],
            samples = SAMPLES.itertuples()
        ),

        # Alignments
        expand(
            f'{ANALYSIS}/star/{{samples.sample}}{{ext}}',
            samples = SAMPLES.itertuples(),
            ext = ['Log.final.out', 'Log.out', 'Log.progress.out', 'ReadsPerGene.out.tab', 'SJ.out.tab',
                   'Aligned.sortedByCoord.out.bam', 'Aligned.sortedByCoord.out.bam.bai']
        ),
        expand(
            f'{ANALYSIS}/samtools/{{samples.sample}}.stats',
            samples = SAMPLES.itertuples()
        ),
        expand(
            f'{ANALYSIS}/samtools/{{samples.sample}}.flagstat',
            samples = SAMPLES.itertuples()
        ),

        # MultiQC
        f'{ANALYSIS}/multiqc/multiqc_report_data/multiqc_data.json',
        f'{ANALYSIS}/multiqc/multiqc_report.html',

        # Platetools data (collects data into a single data frame for plotting)
        f'{ANALYSIS}/plots/platetools_data.tsv',

include:
    'rules/prealignment.smk'

include:
    'rules/align.smk'

include:
    'rules/visualize.smk'
